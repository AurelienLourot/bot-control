if ("${SLAVE_NODE_NAME}") {
    specific_slave="${SLAVE_NODE_NAME}"
}
else specific_slave="${params.SLAVE_LABEL}"

workSpace="full_pipeline-${env.BUILD_ID}"


node (specific_slave) { 
    ws(workSpace) {
        environment {
            CLOUD_NAME="${CLOUD_NAME}"
            MODEL_CONSTRAINTS="${MODEL_CONSTRAINTS}"
            BOOTSTRAP_CONSTRAINTS="${BOOTSTRAP_CONSTRAINTS}"
            SLAVE_NODE_NAME="${env.NODE_NAME}"
        }
        
        stage('Preparation') {
            SLAVE_NODE_NAME="${env.NODE_NAME}"
            prep_job = build job: '1. Full Cloud - Prepare', parameters: [[$class: 'StringParameterValue', name: 'CTI_GIT_REPO', value: "${params.CTI_GIT_REPO}"],
                                                                          [$class: 'StringParameterValue', name: 'CTI_GIT_BRANCH', value: "${params.CTI_GIT_BRANCH}"],
                                                                          [$class: 'StringParameterValue', name: 'SLAVE_NODE_NAME', value: "${SLAVE_NODE_NAME}"],
                                                                          [$class: 'StringParameterValue', name: 'WORKSPACE', value: workSpace],
                                                                          [$class: 'StringParameterValue', name: 'CLOUD_NAME', value: "${params.CLOUD_NAME}"],
                                                                          [$class: 'StringParameterValue', name: 'MODEL_CONSTRAINTS', value: "${params.MODEL_CONSTRAINTS}"],
                                                                          [$class: 'StringParameterValue', name: 'BOOTSTRAP_CONSTRAINTS', value: "${params.BOOTSTRAP_CONSTRAINTS}"]]
            // Enable / disable verbose logging
            /*if ("${VERBOSE_LOGS}") {
                for(String line : prep_job.getRawBuild().getLog(100)){
                        echo line
                }
            }*/
        }
        stage('Bootstrap') {
        // Bootstrap the environment from ${CLOUD_NAME}
            echo "Bootstrapping $ARCH from ${CLOUD_NAME}"
            bootstrap_job = build job: '2. Full Cloud - Bootstrap', parameters: [[$class: 'StringParameterValue', name: 'CLOUD_NAME', value: "${params.CLOUD_NAME}-maas"],
                                                                          [$class: 'StringParameterValue', name: 'WORKSPACE', value: workSpace],
                                                                          [$class: 'StringParameterValue', name: 'SLAVE_NODE_NAME', value: "${SLAVE_NODE_NAME}"],
                                                                          [$class: 'StringParameterValue', name: 'MODEL_CONSTRAINTS', value: "${params.MODEL_CONSTRAINTS}"],
                                                                          [$class: 'StringParameterValue', name: 'BOOTSTRAP_CONSTRAINTS', value: "${params.BOOTSTRAP_CONSTRAINTS}"]]
            /*if ("${VERBOSE_LOGS}") {
                for(String line : bootstrap_job.getRawBuild().getLog(100)){
                        echo line
                }
            }*/
            //sh 'cd examples ; ./controller-arm64.sh'
        }
        stage('Deploy') {
            echo 'Deploy'
            deploy_job = build job: '3. Full Cloud - Deploy', parameters: [[$class: 'StringParameterValue', name: 'CLOUD_NAME', value: "${params.CLOUD_NAME}"],
                                                                          [$class: 'StringParameterValue', name: 'WORKSPACE', value: workSpace],
                                                                          [$class: 'StringParameterValue', name: 'SLAVE_NODE_NAME', value: "${SLAVE_NODE_NAME}"],
                                                                          [$class: 'StringParameterValue', name: 'BUNDLE_URL', value: "${params.BUNDLE_URL}"]]
                sh 'ls -lart'
                //sh 'cd runners/manual-examples ; ./openstack-base-xenial-ocata-arm64-manual.sh'
        }
        stage('Configure') {
            echo 'Configure Cloud'
        }
        stage('Test') {
            echo 'Test Cloud ...'
       }
        stage('Teardown') {
            echo 'Teardown'
            //sh './juju-destroy-model-and-controllers-example.sh -y'
        }
    }
}
